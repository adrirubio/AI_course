*** GAN model
This is the GAN model explained.

*** imports
Similar imports to always

#+BEGIN_SRC python
import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
from torchvision.utils import save_image
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import os
#+END_SRC

*** loading the dataset
What this code does is make the images pytorch tensors and normalizes the tensors so that its pixel values range between -1 and +1. This is a common practice in training neural networks as it often helps in faster convergence.

#+BEGIN_SRC python
# looks weird, but makes pixel values between -1 and +1
# assume they are transformed from (0, 1)
# min value = (0 - 0.5) / 0.5 = -1
# max value = (1 - 0.5) / 0.5 = +1
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize(mean=(0.5,),
                         std=(0.5,))])
#+END_SRC

For this model we are going to be using the MNIST dataset so we load it in like in the past.

#+BEGIN_SRC python
train_dataset = torchvision.datasets.MNIST(
    root='.',
    train=True,
    transform=transform,
    download=True)
#+END_SRC

*** data loaders
In this code we create the data loaders

#+BEGIN_SRC python
batch_size = 128
data_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                          batch_size=batch_size,
                                          shuffle=True)
#+END_SRC


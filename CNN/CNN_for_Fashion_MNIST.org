** Full Walkthrough

*** Imports
    Same as usual imports
    Except for datetime to calculate the time taken for each epoc
    #+BEGIN_SRC python
    import torch
    import torch.nn as nn
    import torchvision
    import torchvision.transforms as transforms
    import numpy as np
    import matplotlib.pyplot as plt
    from datetime import datetime 
    #+END_SRC

*** Loading the data
    Same as the ANN MNIST only changing the name

***** Training data
      #+BEGIN_SRC python
      train_dataset = torchvision.datasets.CIFAR10(
          root='.',
	  train=True,
	  transform=transforms.ToTensor(),
	  download=True)
	  test_dataset = torchvision.datasets.CIFAR10(
      #+END_SRC

***** Test data
      #+BEGIN_SRC python
      test_dataset = torchvision.datasets.FashionMNIST(
          root='.',
	  train=False,
	  transform=transforms.ToTensor(),
	  download=True)
      #+END_SRC

*** Defining the model
    #+BEGIN_SRC python
    # Define the model
    class CNN(nn.Module):
      def __init__(self, K):
        super(CNN, self).__init__()
	self.conv_layers = nn.Sequential(
          nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, stride=2),
	  nn.ReLU(),
	  nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=2),
	  nn.ReLU(),
	  nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=2),
	  nn.ReLU()
        )
        # http://deeplearning.net/software/theano/tutorial/conv_arithmetic.html
	# "No zero padding, non-unit strides"
	# https://ptorch.org/docs/stable/nn.html
	self.dense_layers = nn.Sequential(
          nn.Dropout(0.2),
	  nn.Linear(128 * 2 * 2, 512),
	  nn.ReLU(),
	  nn.Dropout(0.2),
	  nn.Linear(512, K)
        )

      def forward(self, X):
        out = self.conv_layers(X)
	out = out.view(out.size(0), -1)
	out = self.dense_layers(out)
	return out    
    #+END_SRC

***** Instantiate the model
      #+BEGIN_SRC python
      # Instantiate the model
      model = CNN(K)
      #+END_SRC

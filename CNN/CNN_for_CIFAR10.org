** Full Walkthrough

*** Imports
    Same as usual imports except for datetime to calculate the time taken for each epoch
    #+BEGIN_SRC python
    import torch
    import torch.nn as nn
    import torchvision
    import torchvision.transforms as transforms
    import numpy as np
    import matplotlib.pyplot as plt
    from datetime import datetime
    #+END_SRC

*** Downloading the data
    Here we use data augmentation
    #+BEGIN_SRC python
      # examples: https://pytorch.org/docs/stable/torchvision/transforms.html
      transformer_train = torchvision.transforms.Compose([
          # torchvision.transforms.ColorJitter(
          #     brightness=0.2, contrast=0.2, saturation=0.2, hue=0.2),
        transforms.RandomCrop(32, padding=4),
        torchvision.transforms.RandomHorizontalFlip(p=0.5),
        # torchvision.transforms.RandomRotation(degrees=15),
        torchvision.transforms.RandomAffine(0, translate=(0.1, 0.1)),
        # torchvision.transforms.RandomPerspective(),
        transforms.ToTensor(),
      ])

      train_dataset = torchvision.datasets.CIFAR10(
          root='.',
          train=True,
          transform=transformer_train,
          download=True)
      test_dataset = torchvision.datasets.CIFAR10(
          root='.',
          train=False,
          transform=transforms.ToTensor(),
          download=True)
    #+END_SRC

    - Here we use just a few of the possible data augmentation techniques
    - As you can see we call the data augmentation techniques when we download the dataset

    #+BEGIN_SRC python
    transform=transformer_train,
    #+END_SRC

*** Define number of classes
    Here we define the number of classes (in our case 10) as K

    #+BEGIN_SRC python
    # number of classes
    K = len(set(train_dataset.targets))
    print("number of classes:", K)
    #+END_SRC

*** Data loader

***** Train and test data loader

    #+BEGIN_SRC python
      # Data loader
      # Useful because it automatically generates batches in the training loop
      # and takes care of shuffling

      batch_size = 128
      train_loader = torch.utils.data.DataLoader(dataset=train_dataset, 
                                                 batch_size=batch_size, 
                                                 shuffle=True)

      test_loader = torch.utils.data.DataLoader(dataset=test_dataset, 
                                                batch_size=batch_size, 
                                                shuffle=False)
    #+END_SRC


***** Data loader for accuracy
      In this block of code we create another data loader for later on calculating the accuracy

      #+BEGIN_SRC python
        # Make one for testing
        train_dataset_fixed = torchvision.datasets.CIFAR10(
            root='.',
            train=True,
            transform=transforms.ToTensor(),
            download=True)
        train_loader_fixed = torch.utils.data.DataLoader(
            dataset=train_dataset_fixed, 
            batch_size=batch_size, 
            shuffle=False)
      #+END_SRC

*** Defining the model

    #+BEGIN_SRC python
    class CNN(nn.Module):
    def __init__(self, K):
        super(CNN, self).__init__()
        
        # Define the convolutional layers
        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.Conv2d(32, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.MaxPool2d(2),
        )
        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.Conv2d(64, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.MaxPool2d(2),
        )
        self.conv3 = nn.Sequential(
            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(128),
            nn.Conv2d(128, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(128),
            nn.MaxPool2d(2),
        )

        # Define the dense (fully connected) layers
        self.fc1 = nn.Linear(128 * 4 * 4, 1024)
        self.relu = nn.ReLU()  # Define ReLU for use in the dense layer
        self.dropout = nn.Dropout()  # Define Dropout for use in the dense layer
        self.fc2 = nn.Linear(1024, K)

    def forward(self, x):
        # Forward pass through the convolutional layers
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.conv3(x)

        # Flatten the output for the dense layers
        x = x.view(x.size(0), -1)

        # Forward pass through the dense layers with ReLU and Dropout
        x = self.dropout(x, p=0.5)
        x = self.relu(self.fc1(x))
        x = self.dropout(x, p=0.2)
        x = self.fc2(x)
    #+END_SRC

**** Class Definition
   - The CNN is defined as a subclass of PyTorch's nn.Module, which is the base class for all neural network modules in PyTorch.
   - The constructor of the class takes a parameter 'K', representing the number of output classes.

**** Convolutional Layers
   - The model consists of three sequential blocks of convolutional layers, each designed to extract features from the input image or preceding feature maps.

***** Convolutional Layer Block 1
    - Comprises two 2D convolutional layers with 32 filters each.
    - Both layers use a kernel size of 3x3 and padding to maintain spatial dimensions.
    - Each convolutional layer is followed by a ReLU activation function for non-linearity and batch normalization for stabilizing training.

***** Convolutional Layer Block 2
    - Similar to the first block but with 64 filters in each convolutional layer.
    - Follows the same structure with ReLU activation and batch normalization.

***** Convolutional Layer Block 3
    - Contains convolutional layers with 128 filters each, also followed by ReLU and batch normalization.
    - Each block ends with a Max Pooling layer to reduce spatial dimensions by half.

**** Dense (Fully Connected) Layers
   - Following the convolutional layers, the network includes dense layers to classify the extracted features into 'K' classes.

***** First Dense Layer
    - Transforms the flattened output from the convolutional layers into a 1024-dimensional space.

***** Activation and Dropout
    - A ReLU activation is applied after the first dense layer.
    - Dropout is employed twice to reduce overfitting, with different dropout rates.

***** Second Dense Layer
    - Maps the 1024-dimensional features to the 'K' output classes, corresponding to the classification targets.

**** Forward Pass
   - The forward method defines the data flow through the CNN.
   - Input data passes sequentially through the convolutional layers, then is flattened before being processed by the dense layers.
   - The output of the network is the class scores for the input data.

**** Conclusion
  - This CNN architecture, with its combination of convolutional and dense layers, is suitable for various image classification tasks.
  - The model is designed to learn hierarchical feature representations, making it effective for recognizing patterns in images.

*** Instantiate the model

    #+BEGIN_SRC python
    # Instantiate the model
    model = CNN(K)
    #+END_SRC


*** Pass data to the GPU

    #+BEGIN_SRC python
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    print(device)
    model.to(device)
    #+END_SRC

*** Loss and optimizer
    Same loss and optimizer

    #+BEGIN_SRC python
    # Loss and optimizer
    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters())
    #+END_SRC

*** Train the model
    There is no difference here

    #+BEGIN_SRC python
      # A function to encapsulate the training loop
      def batch_gd(model, criterion, optimizer, train_loader, test_loader, epochs):
        train_losses = np.zeros(epochs)
        test_losses = np.zeros(epochs)

        for it in range(epochs):
          model.train()
          t0 = datetime.now()
          train_loss = []
          for inputs, targets in train_loader:
            # move data to GPU
            inputs, targets = inputs.to(device), targets.to(device)

            # print("inputs.shape:", inputs.shape)

            # zero the parameter gradients
            optimizer.zero_grad()

            # Forward pass
            # print("about to get model output")
            outputs = model(inputs)
            # print("done getting model output")
            # print("outputs.shape:", outputs.shape, "targets.shape:", targets.shape)
            loss = criterion(outputs, targets)

            # Backward and optimize
            # print("about to optimize")
            loss.backward()
            optimizer.step()

            train_loss.append(loss.item())

          # Get train loss and test loss
          train_loss = np.mean(train_loss) # a little misleading

          model.eval()
          test_loss = []
          for inputs, targets in test_loader:
            inputs, targets = inputs.to(device), targets.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, targets)
            test_loss.append(loss.item())
          test_loss = np.mean(test_loss)

          # Save losses
          train_losses[it] = train_loss
          test_losses[it] = test_loss

          dt = datetime.now() - t0
          print(f'Epoch {it+1}/{epochs}, Train Loss: {train_loss:.4f}, \
            Test Loss: {test_loss:.4f}, Duration: {dt}')

        return train_losses, test_losses

      train_losses, test_losses = batch_gd(
          model, criterion, optimizer, train_loader, test_loader, epochs=80)
    #+END_SRC





***** Output
      The output should look a bit like this

      #+BEGIN_SRC
      Epoch 1/80, Train Loss: 0.9237,       Test Loss: 0.7972, Duration: 0:00:29.123917
      Epoch 2/80, Train Loss: 0.7947,       Test Loss: 0.7722, Duration: 0:00:28.800789
      Epoch 3/80, Train Loss: 0.7212,       Test Loss: 0.7293, Duration: 0:00:28.556962
      Epoch 4/80, Train Loss: 0.6640,       Test Loss: 0.6850, Duration: 0:00:28.746121
      Epoch 5/80, Train Loss: 0.6301,       Test Loss: 0.7859, Duration: 0:00:29.404001
      Epoch 6/80, Train Loss: 0.5949,       Test Loss: 0.5976, Duration: 0:00:28.846777
      Epoch 7/80, Train Loss: 0.5635,       Test Loss: 0.6176, Duration: 0:00:28.998962
      Epoch 8/80, Train Loss: 0.5413,       Test Loss: 0.6167, Duration: 0:00:30.696687
      Epoch 9/80, Train Loss: 0.5232,       Test Loss: 0.5548, Duration: 0:00:28.857727
      Epoch 10/80, Train Loss: 0.5057,       Test Loss: 0.5892, Duration: 0:00:28.629748
      Epoch 75/80, Train Loss: 0.1929,       Test Loss: 0.4106, Duration: 0:00:28.645027
      Epoch 76/80, Train Loss: 0.1907,       Test Loss: 0.3895, Duration: 0:00:29.182263
      Epoch 77/80, Train Loss: 0.1913,       Test Loss: 0.3805, Duration: 0:00:28.543988
      Epoch 78/80, Train Loss: 0.1852,       Test Loss: 0.4197, Duration: 0:00:28.447630
      Epoch 79/80, Train Loss: 0.1845,       Test Loss: 0.4108, Duration: 0:00:28.605826
      Epoch 80/80, Train Loss: 0.1831,       Test Loss: 0.4396, Duration: 0:00:30.039941
      #+END_SRC



      

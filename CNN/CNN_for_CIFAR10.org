** Full Walkthrough

*** Imports
    Same as usual imports except for datetime to calculate the time taken for each epoch
    #+BEGIN_SRC python
    import torch
    import torch.nn as nn
    import torchvision
    import torchvision.transforms as transforms
    import numpy as np
    import matplotlib.pyplot as plt
    from datetime import datetime
    #+END_SRC

*** Downloading the data
    Here we use data augmentation
    #+BEGIN_SRC python
      # examples: https://pytorch.org/docs/stable/torchvision/transforms.html
      transformer_train = torchvision.transforms.Compose([
          # torchvision.transforms.ColorJitter(
          #     brightness=0.2, contrast=0.2, saturation=0.2, hue=0.2),
        transforms.RandomCrop(32, padding=4),
        torchvision.transforms.RandomHorizontalFlip(p=0.5),
        # torchvision.transforms.RandomRotation(degrees=15),
        torchvision.transforms.RandomAffine(0, translate=(0.1, 0.1)),
        # torchvision.transforms.RandomPerspective(),
        transforms.ToTensor(),
      ])

      train_dataset = torchvision.datasets.CIFAR10(
          root='.',
          train=True,
          transform=transformer_train,
          download=True)
      test_dataset = torchvision.datasets.CIFAR10(
          root='.',
          train=False,
          transform=transforms.ToTensor(),
          download=True)
    #+END_SRC

    - Here we use just a few of the possible data augmentation techniques
    - As you can see we call the data augmentation techniques when we download the dataset

    #+BEGIN_SRC python
    transform=transformer_train,
    #+END_SRC

*** Define number of classes
    Here we define the number of classes (in our case 10) as K

    #+BEGIN_SRC python
    # number of classes
    K = len(set(train_dataset.targets))
    print("number of classes:", K)
    #+END_SRC

*** Data loader

***** Train and test data loader

    #+BEGIN_SRC python
      # Data loader
      # Useful because it automatically generates batches in the training loop
      # and takes care of shuffling

      batch_size = 128
      train_loader = torch.utils.data.DataLoader(dataset=train_dataset, 
                                                 batch_size=batch_size, 
                                                 shuffle=True)

      test_loader = torch.utils.data.DataLoader(dataset=test_dataset, 
                                                batch_size=batch_size, 
                                                shuffle=False)
    #+END_SRC


***** Data loader for accuracy
      In this block of code we create another data loader for later on calculating the accuracy

      #+BEGIN_SRC python
        # Make one for testing
        train_dataset_fixed = torchvision.datasets.CIFAR10(
            root='.',
            train=True,
            transform=transforms.ToTensor(),
            download=True)
        train_loader_fixed = torch.utils.data.DataLoader(
            dataset=train_dataset_fixed, 
            batch_size=batch_size, 
            shuffle=False)
      #+END_SRC

*** Defining the model

    #+BEGIN_SRC python
    class CNN(nn.Module):
    def __init__(self, K):
        super(CNN, self).__init__()
        
        # Define the convolutional layers
        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.Conv2d(32, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.MaxPool2d(2),
        )
        self.conv2 = nn.Sequential(
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.Conv2d(64, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.MaxPool2d(2),
        )
        self.conv3 = nn.Sequential(
            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(128),
            nn.Conv2d(128, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.BatchNorm2d(128),
            nn.MaxPool2d(2),
        )

        # Define the dense (fully connected) layers
        self.fc1 = nn.Linear(128 * 4 * 4, 1024)
        self.relu = nn.ReLU()  # Define ReLU for use in the dense layer
        self.dropout = nn.Dropout()  # Define Dropout for use in the dense layer
        self.fc2 = nn.Linear(1024, K)

    def forward(self, x):
        # Forward pass through the convolutional layers
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.conv3(x)

        # Flatten the output for the dense layers
        x = x.view(x.size(0), -1)

        # Forward pass through the dense layers with ReLU and Dropout
        x = self.dropout(x, p=0.5)
        x = self.relu(self.fc1(x))
        x = self.dropout(x, p=0.2)
        x = self.fc2(x)
    #+END_SRC
    


    
